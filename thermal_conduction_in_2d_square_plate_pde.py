# -*- coding: utf-8 -*-
"""Thermal Conduction in 2D square plate-PDE

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bDUgydGX1L8EZK90LgoTMLAnnhFEBI_a
"""

import deepxde as dde
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import torch

# define PDE
def PDE_laplace_2d(x, u):
    du_xx = dde.grad.hessian(u, x, i=0, j=0)
    du_yy = dde.grad.hessian(u, x, i=1, j=1)
    return du_xx + du_yy

# define geometry
def geometry():
    geom = dde.geometry.Rectangle(xmin=[0, 0], xmax=[2, 2])
    return geom

# define BCs
def bottom(x, on_boundary):
    return on_boundary
bc_bottom = dde.DirichletBC(geometry(), lambda x: 1, bottom)

def top(x, on_boundary):
    return on_boundary
bc_top = dde.DirichletBC(geometry(), lambda x: 0.333, top)

def left(x, on_boundary):
    return on_boundary
bc_left = dde.DirichletBC(geometry(), lambda x: 0, left)

def right(x, on_boundary):
    return on_boundary
bc_right = dde.DirichletBC(geometry(), lambda x: 0.667, right)

# define problem
data = dde.data.PDE(
    geometry(),
    PDE_laplace_2d,
    [bc_bottom, bc_top, bc_left, bc_right],
    num_domain=1000,
    num_boundary=400,
    num_test=1024,
)

# define neural network

net = dde.maps.FNN([2] + [50] * 3 + [1], "tanh", "Glorot normal")

# data set up


# optional
# Define a callback to print training info every 10 steps
model = dde.Model(data, net)
model.compile("adam", lr = 0.001)
model.train(epochs = 15000)

# Predict on a grid
import numpy as np
n_points = 100
x = np.linspace(0, 2, n_points)
y = np.linspace(0, 2, n_points)
X, Y = np.meshgrid(x, y)
grid_points = np.vstack([X.ravel(), Y.ravel()]).T
predicted_temperature = model.predict(grid_points).reshape(n_points, n_points)

# Plot the predicted temperature distribution
import matplotlib.pyplot as plt

plt.imshow(predicted_temperature, extent=[0, 2, 0, 2], origin='lower', cmap='coolwarm')
plt.colorbar(label='Temperature')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Predicted Temperature Distribution')
plt.show()