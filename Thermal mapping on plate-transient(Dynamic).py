# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pz3kIXg9u5UfqH1iEupswh8va43EdMgN
"""

import deepxde as dde
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from PIL import Image

geom = dde.geometry.Rectangle(xmin=[0, 0], xmax=[3, 3])
timedomain = dde.geometry.TimeDomain(0, 1)
geomtime = dde.geometry.GeometryXTime(geom, timedomain)

def pde(x, u):
  u_t = dde.grad.jacobian(u, x, i=0, j=2)
  u_xx = dde.grad.hessian(u, x, i=0, j=0)
  u_yy = dde.grad.hessian(u, x, i=1, j=1)
  x0, y0 = 1.5, 1.5
  alpha = 0.1
  A = 20
  sigma = 0.25
  dx2 = (x[:, 0] - x0) ** 2 + (x[:, 1] - y0) ** 2
  dy2 = (x[:, 1] - y0) ** 2 + (x[:, 0] - x0) ** 2
  Q = A * tf.exp(-dx2 / (2 * sigma ** 2)) * tf.exp(-dy2 / (2 * sigma ** 2))
  return u_t + alpha * (u_xx + u_yy) - Q

def inital_function(x):
  return np.zeros((x.shape[0], 1))

ic = dde.icbc.IC(geomtime, inital_function, lambda _, on_initial: on_initial)

bc = dde.icbc.DirichletBC(geomtime, lambda x: 0, lambda _, on_boundary: on_boundary)

def image_points(filename, t_snapshot, nx_sample=40, ny_sample=40):
  img = Image.open(filename)
  img_array = np.array(img)
  h, w = arr.shape

  xs = np.linespace(0, w - 1, nx_sample)
  ys = np.linespace(0, h - 1, ny_sample)
  pts = []
  for x in xs:
    for y in ys:
      pts.append([x, y, t_snapshot])
  return np.array(pts)

data = dde.data.TimePDE(
    geomtime, pde, [ic, bc], num_domain=5000, num_boundary=400, num_initial=1000
)

net = dde.maps.FNN([3] + [50] * 3 + [1], "tanh", "Glorot normal")
model = dde.Model(data, net)

model.compile("adam", lr=1e-3)
losshistory, train_state = model.train(iterations=3000)

def plot_snapshot(model, t_query=0.5, nx=100, ny=100):
  xs = np.linspace(0, 3, nx)
  ys = np.linspace(0, 3, ny)
  X, Y = np.meshgrid(xs, ys)
  XYT = np.vstack([X.ravel(), Y.ravel(), np.ones_like(X.ravel()) * t_query]).T
  u = model.predict(XYT)
  u = u.reshape(nx, ny)
  plt.figure() # Create a new figure for each plot
  plt.pcolormesh(X, Y, u, cmap="jet")
  plt.colorbar(label="Temperature")
  plt.title(f"Thermal Map at t={t_query:.2f}")
  plt.xlabel("x")
  plt.ylabel("y")
  plt.savefig(f"snapshot_{t_query:.2f}.png") # Save the figure
  plt.close() # Close the figure to free memory

time_points = np.arange(0, 2.05, 0.05)
for t in time_points:
  plot_snapshot(model, t_query=t)

import imageio

filenames = [f"snapshot_{t:.2f}.png" for t in np.arange(0, 2.05, 0.05)]
imageio.mimsave('thermal_animation.gif', [imageio.imread(f) for f in filenames], duration=0.1)

from IPython.display import Image
Image(filename='thermal_animation.gif')