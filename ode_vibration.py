# -*- coding: utf-8 -*-
"""ODE vibration

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hvn7QDytClf5qlbL6gCiJKbCKY9qojAy
"""

import deepxde as dde
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import torch


print("TensorFlow:", tf.__version__)
print("DeepXDE:", dde.__version__)

np.random.seed(1234)
tf.random.set_seed(1234)

# define the time domain

geom = dde.geometry.TimeDomain(0, 10)

# define the ODE system: u''(t)+0.2u'(t)+4u = cos(4t)
def ode(t, u):
  du_t = dde.grad.jacobian(u, t, i=0) #u'(t)
  d2u_tt = dde.grad.hessian(u, t, i=0) #u''(t)
  return d2u_tt + 0.2 * du_t + 4 * u - tf.cos(4*t)

  # initial condition: u(0) = 1, u'(0) = 1

ic1 = dde.IC(geom, lambda x: 1, lambda x, _: np.isclose(x[0], 0)) #u(0) = 1
ic2 = dde.OperatorBC(geom, lambda inputs, outputs, X: dde.grad.jacobian(outputs, inputs, i=0), lambda x, _: np.isclose(x[0], 0)) #u'(0) = 0

# constract the data
data = dde.data.PDE(
    geom,
    ode,
    [ic1, ic2],
    num_domain = 200,
    num_boundary = 2,
    num_test = 1000,
)

# neural network: [t] --> u(t)
net = dde.maps.FNN([1] + [50] * 3 + [1], "tanh", "Glorot normal")

#buid and train the model

model = dde.Model(data, net)
model.compile("adam", lr = 0.001)
model.train(epochs = 10000)

# Plot the results
import numpy as np
import matplotlib.pyplot as plt

t = np.linspace(0, 10, 1000).reshape(-1, 1)
u_pred = model.predict(t)

plt.figure(figsize=(10, 6))
plt.plot(t, u_pred, label='PINN prediction')
plt.xlabel('t')
plt.ylabel('u(t)')
plt.title('Solution of the ODE using DeepXDE')
plt.legend()
plt.grid(True)
plt.show()